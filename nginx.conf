server {
    listen 80;
    server_name localhost;

    # Add Docker's internal DNS resolver
    resolver 127.0.0.11 valid=10s;

    root /usr/share/nginx/html;
    index index.html;

    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Add debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;

    # Serve all static assets
    location /assets/ {
        alias /usr/share/nginx/html/assets/;
        add_header Cache-Control "public, max-age=31536000";
        add_header Content-Type $content_type;
        try_files $uri $uri/ =404;
    }

    # Set correct MIME types for JavaScript files
    location ~* \.js$ {
        add_header Content-Type "application/javascript";
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, max-age=31536000";
    }

    # Set correct MIME types for CSS files
    location ~* \.css$ {
        add_header Content-Type "text/css";
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, max-age=31536000";
    }

    # Don't cache HTML files
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
    }

    # Handle root path and SPA routing
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy requests to Ollama /api/chat endpoint
    location /api/chat {
        # The address should match the service name and port in docker-compose.yml
        # Using a variable forces Nginx to resolve the DNS at request time
        set $ollama_upstream ollama:11434;
        proxy_pass http://$ollama_upstream/api/chat;

        # Necessary headers for proxying
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Settings for streaming responses
        proxy_buffering off;          # Disable buffering for streaming
        proxy_cache off;            # Disable caching for dynamic content
        proxy_http_version 1.1;     # Use HTTP/1.1 for keep-alive connections
        proxy_set_header Connection ""; # Clear Connection header for keep-alive with backend
        proxy_read_timeout 3600s;     # Increase timeout for potentially long-running streams
        proxy_send_timeout 3600s;
    }
}
